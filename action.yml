name: 'Test Migration MS'
description: 'Queima Labs DevOps Stack - Terraform apply resources'
inputs:
  cache_name:
    description: Cache usage name for step
    required: true
    default: terraform
  target_resource:  # ID Service
    description: This should be used as target only to be applied
    required: false
    default: ''
  awsqueima_environment:  # ID Service
    description: AWS environment to get credentials for
    required: true
    default: 'main'
  vault_addr:  # ID Service
    description: URL to Vault endpoint
    required: true
  ssh_key:
    description: SSH Key with permissions to download repos
    required: true
    default: ''
  github_token:
    description: PAT with repo access to write on pull request comments
    required: true
    default: ''
outputs:
  terraform_resource_output:
    description: Get 
    value: ${{ steps.get_terraform_resource_output.outputs.terraform_resource_output }}

runs:
  using: "composite"
  steps:  
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Credentials
      uses: queimadiaria/action-vault-aws@main
      with:
        vault_addr: ${{ inputs.vault_addr }}
        ssh_key: ${{ inputs.ssh_key }}
        awsqueima_environment: ${{ inputs.awsqueima_environment }}

    - name: Setup Teraform environment
      shell: bash
      run: |
        bash config/terraform.config.sh
        cat terraform/variables.auto.tfvars

    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: terraform/.terraform
        key: ${{ runner.os }}-tf-${{ inputs.cache_name }}-${{ hashFiles('**/*.auto.tfvars') }}
        restore-keys: |
          ${{ runner.os }}-tf-${{ inputs.cache_name }}-

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ inputs.terraform_api_token }}

    - name: Terraform Init
      working-directory: ./terraform
      shell: bash
      run:  terraform init -upgrade
      
    - name: Terraform Validate
      working-directory: ./terraform
      shell: bash
      run:  terraform validate

    - name: Terraform Format
      working-directory: ./terraform
      shell: bash
      run:  terraform fmt -recursive

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      working-directory: ./terraform
      shell: bash
      run: 'terraform plan -no-color || echo -e "################## \n Error at Terraform Plan \n ##################"'
      
    - name: Update Pull Request
      uses: actions/github-script@v4
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      shell: bash
      run: exit 1

    - name: Terraform Apply
      if: github.event_name == 'push'
      env:
        TARGET: ${{ inputs.target_resource }}
      working-directory: ./terraform
      shell: bash
      run: |
        if [ -z "${TARGET}" ]; then
          echo "### Apply all resources ###"
          terraform apply -auto-approve
        else 
          echo "### Apply resource ${TARGET} ###"
          terraform apply -target=${TARGET} -auto-approve
        fi

    # - name: Set output
    #   id: get_terraform_resource_output
    #   shell: bash
    #   env:
    #     RESOURCE_OUTPUT: ${{ inputs.state_resource_name }}
    #   working-directory: ./terraform
    #   run: echo "::set-output name=terraform_resource_output::'$(terraform output -json ${RESOURCE_OUTPUT} | jq -r )'"
